#!/bin/bash
#Listar series y películas existentes en la base de datos de varias formas

#Lugar donde están almacenados los medios que queremos detectar
#medios_DIR="/home/mhyst/NAS/Download/transmission/completed/"
medios_DIR="/home/mhyst/Extra/Peliculas/"


#Listar todos los medios
#En el formato siguiente:
#De las películas:
#id titulo pelicula
#De las series igual que la función siguiente a esta (medios.listSeries)
function medios.listAll() {
	local datos=$(db.executeQuery "select * from medio")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		if [[ ${PELICULA[esserie]} == 1 ]]; then
			e="$e serie"
			local ds=$(db.executeQuery "select * from episodio where idmedio = ${PELICULA[id]} and esvisto = 0 order by temporada, episodio limit 1")
			if [[ $ds != "" ]]; then
			 	series.parseEpisodio "$ds"
			 	e="$e ${EPISODIO[temporada]}x${EPISODIO[episodio]}"
			 	e2=""
			 	if [[ ${EPISODIO[fichero]} == "" ]]; then
			 		e2="no"
			 	else
			 		e2="si"
			 	fi
			 	if [[ ${EPISODIO[torrent]} == "" ]]; then
			 		e2="$e2 no"
			 	else
			 		e2="$e2 si"
			 	fi
			 	e="$e $e2"			 	
			else
			 	e="$e -1"
			fi
		else
			e="$e pelicula"
		fi
		echo "$e"
	done
}

#Listar todas las series
#El formato de salida es el siguiente:
#id titulo episodio descargado descargando
#
#El episodio será dado en el formato temporadaxepisodio, sin espacios
#Descargado y descargando serán "si" o "no" en minúsculas.
#
#Si la serie no tiene episodios, en lugar del episodio mostrará "-1" y no
#dará más detalles.
function medios.listSeries() {
	local datos=$(db.executeQuery "select * from medio where esserie = 1")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		
		local ds=$(db.executeQuery "select * from episodio where idmedio = ${PELICULA[id]} and esvisto = 0 order by temporada, episodio limit 1")
		if [[ $ds != "" ]]; then
		 	series.parseEpisodio "$ds"
		 	e="$e ${EPISODIO[temporada]}x${EPISODIO[episodio]}"
		 	e2=""
		 	if [[ ${EPISODIO[fichero]} == "" ]]; then
		 		e2="no"
		 	else
		 		e2="si"
		 	fi
		 	if [[ ${EPISODIO[torrent]} == "" ]]; then
		 		e2="$e2 no"
		 	else
		 		e2="$e2 si"
		 	fi
		 	e="$e $e2"
		else
			e="$e -1"
		fi
		echo "$e"
	done
}

#Listar todas las películas
#En el formato id titulo
function medios.listPeliculas() {
	local datos=$(db.executeQuery "select * from medio")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		echo "$e"
	done
}

function medios.findSeries() {
	local busqueda="$1"
	local datos=$(db.executeQuery "select * from medio where esserie = 1 and titulo like \"%$busqueda%\"")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		
		local ds=$(db.executeQuery "select * from episodio where idmedio = ${PELICULA[id]} and esvisto = 0 order by temporada, episodio limit 1")
		if [[ $ds != "" ]]; then
		 	series.parseEpisodio "$ds"
		 	e="$e ${EPISODIO[temporada]}x${EPISODIO[episodio]} ${EPISODIO[id]}"
		 	e2=""
		 	if [[ ${EPISODIO[fichero]} == "" ]]; then
		 		e2="no"
		 	else
		 		e2="si"
		 	fi
		 	if [[ ${EPISODIO[torrent]} == "" ]] || [[ ${EPISODIO[torrent]} == "-1" ]]; then
		 		e2="$e2 no"
		 	else
		 		e2="$e2 si"
		 	fi
		 	e="$e $e2"
		else
			e="$e -1"
		fi
		echo "$e"
	done
}

function medios.findPeliculas() {
	local busqueda="$1"
	local datos=$(db.executeQuery "select * from medio where esserie = 0 and titulo like \"%$busqueda%\"")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		echo "$e"
	done
}

function medios.listEpisodios() {
	local idmedio="$1"
	local e=""

	local datos=$(db.executeQuery "select * from episodio where idmedio = $idmedio order by temporada, episodio")
	readarray -t datosa <<< "$datos"
	for episodio in "${datosa[@]}"; do
		series.parseEpisodio "$episodio"

		e="${EPISODIO[id]} ${EPISODIO[temporada]} ${EPISODIO[episodio]} ${EPISODIO[fichero]} ${EPISODIO[torrent]} ${EPISODIO[esvisto]}"
		echo "$e"
	done
}

function medios.getTituloSerie() {
	local medio="$1"

	local aux="${medio##*/}"
	aux="${aux%.*}"
	aux="${aux%%[0-9]*}"
	aux="${aux%%(*}"
	aux="${aux%%[*}"
	# aux="${aux%%HDTV*}"
	aux=$(tr '.' ' ' <<< $aux)
	aux=$(tr -d '-' <<< $aux)
	echo $(trim "$aux")
}

function medios.getTituloPelicula() {
	local medio="$1"

	local aux="${medio##*/}"
	aux="${aux%.*}"
	#aux="${aux%%[0-9]*}"
	aux="${aux%%(*}"
	aux="${aux%%[*}"
	# aux="${aux%%HDTV*}"
	aux=$(tr '.' ' ' <<< $aux)
	aux=$(tr -d '-' <<< $aux)
	#aux=$(tr -d "'" <<< $aux)
	echo $(trim "$aux")
}

function medios.detectar() {
	local folder="$1"
	local re='[0-9]{1,2}x[0-9]{1,3}'
	local te=""
	local temporada=""
	local episodio=""
	local titulo=""
	local fichero=""
	local torrent=""
	local aux=""
	local id=""
	local epid=""

	if [ ! -d "$folder" ]; then
	 	echo "El directorio >$folder< no existe"
	 	exit
	fi
	cd "$folder"
	find * -name '*.avi' -o -name '*.mp4' -o -name '*.mkv' -type f | sort > /tmp/films.txt

	readarray -t datosa < /tmp/films.txt
	for medio in "${datosa[@]}"; do

		#aux=`sed "s/&apos;/\'/g" <<< $medio`
		fichero="$folder$medio"

		te=$(grep -oE '[0-9]{1,2}x[0-9]{1,3}' <<< $medio)
		if [[ "$te" != "" ]]; then
			titulo=$(medios.getTituloSerie "$medio")
			echo "Serie: $titulo"
			#Es una serie tenemos que crear la serie si no existe y crear el episodio correspondiente
			#Extraemos el episodio y la temporada que es
			IFS='x' read -a aux <<< "$te"; IFS=" "
			temporada="${aux[0]}"
			episodio="${aux[1]}"
			if [[ "$temporada" == "" ]] || [[ "$episodio" == "" ]]; then
				echo "ERROR: No se pudo obtener te2 en >$medio<"; continue;
			else
				echo "Temporada: $temporada, Episodio: $episodio"
			fi
			id=$(series.getIdByTitulo "$titulo")
			if [[ "$id" == "" ]]; then
				#No existe, la creamos
				series.add "$titulo" "null" "-1"
				id="$ROWID"
			fi

			$DEBUG && echo "Comprobando si el episodio existe"
			epid=$(series.getEpisodioId "$id" "$temporada" "$episodio")
			$DEBUG && echo "Comprobado $epid"
			if [[ "$epid" == "" ]]; then
				$DEBUG && echo "Intentando insertar episodio..."
				#Puesto que ya existe, añadimos el episodio
				series.addEpisodio "$id" "$temporada" "$episodio" "$fichero" "-1"
				$DEBUG && echo "Intentado!"
			else
				echo "Ep episodio ya está en la base de datos."
			fi
		else
			#Si es una película, simplemente añadimos la película
			titulo=$(medios.getTituloPelicula "$medio")
			echo "Pelicula: $titulo"
			id=$(film.getByTitulo "$titulo")
			if [[ "$id" == "" ]]; then
				#No existe, la creamos
				film.add "$titulo" "$fichero" "-1"
				id="$ROWID"
			else
				echo "La película ya existe en la base de datos"
			fi			
		fi
	done
}

#Determinar el id de la serie que estamos buscando.
#En algunos casos es posible que haya varias series con nombres similares.
#Esta función permitirá al usuario seleccionar entre ellas la que quiere.
function medios.determineSeries() {
	local busqueda="$1"

	local res=$(series.find "$busqueda")
	readarray -t devueltos <<< $res

	if [[ ${#devueltos[@]} == 0 ]]; then
		echo "-1"
		exit
	fi

	if [[ ${#devueltos[@]} == 1 ]]; then
		series.parse "${devueltos[0]}"
		echo "${SERIE[id]}"
	else
		echo "Series coincidentes:" > /dev/tty
		echo "--------------------" > /dev/tty
		let i=0
		for reg in "${devueltos[@]}"; do
			series.parse "$reg"
			echo "$i -  ${SERIE[titulo]}" > /dev/tty
			(( i++ ))
		done
		local LIMITE=$(( ${#devueltos[*]} - 1 ))
		local CHOSENID=$(userChoice $LIMITE "Seleccione la serie:")
		series.parse "${devueltos[$CHOSENID]}"
		echo "${SERIE[id]}"
	fi
}

#Determinar si un episodio de una serie está ya descargado
function medios.isDownloaded () {

	local id="$1"
	local te="$2"

	$DEBUG && echo "ID: $id, TE: $te" > /dev/tty

	IFS='x' read -a aux <<< "$te"; IFS=" "
	temporada="${aux[0]}"
	episodio="${aux[1]}"
	if [[ "$temporada" == "" ]] || [[ "$episodio" == "" ]]; then
		echo "ERROR: No se pudo obtener te2 en >$medio<" > /dev/tty
		echo "false"
		exit
	fi

	if [[ "$id" == "" ]] || [[ "$id" == "-1" ]]; then
		echo "ERROR: No se pudo determinar el id de la serie: $serie" > /dev/tty
		echo "false"
		exit
	fi

	local epid=$(series.getEpisodioId "$id" "$temporada" "$episodio")

	if [[ "$epid" == "" ]]; then
		echo "false"
		exit
	else
		local reg=$(series.getEpisodioById "$epid")
		if [[ "$reg" == "" ]]; then
			echo "ERROR: No se pudo obtener el episodio por el ID obtenido"
			echo "false"
			exit
		fi
		series.parse "$reg"
		if [[ "${SERIE[fichero]}" == "" ]]; then
			echo "false"
		else
			echo "true"
		fi
	fi
}

#Determinar si un episodio de una serie está ya descargado
function medios.isDownloaded2 () {

	local serie="$1"
	local te="$2"

	IFS='x' read -a aux <<< "$te"; IFS=" "
	temporada="${aux[0]}"
	episodio="${aux[1]}"
	if [[ "$temporada" == "" ]] || [[ "$episodio" == "" ]]; then
		echo "ERROR: No se pudo obtener te2 en >$medio<" > /dev/tty
		echo "-1"
		exit
	fi

	local id=$(medios.determineSeries "$serie")

	if [[ "$id" != "" ]] && [[ "$id" != "-1" ]]; then
		echo "ERROR: No se pudo determinar el id de la serie: $serie" > /dev/tty
		echo "-1"
		exit
	fi

	local epid=$(series.getEpisodioId "$id" "$temporada" "$episodio")

	if [[ "$epid" == "" ]]; then
		echo "false"
		exit
	else
		local reg=$(series.getEpisodioById "$epid")
		if [[ "$reg" == "" ]]; then
			echo "ERROR: No se pudo obtener el episodio por el ID obtenido"
			echo "-1"
			exit
		fi
		series.parse "$reg"
		if [[ "${SERIE[fichero]}" == "" ]]; then
			echo "false"
		else
			echo "true"
		fi
	fi
}
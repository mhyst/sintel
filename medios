#!/bin/bash
#Listar series y películas existentes en la base de datos de varias formas

function medios.info() {
    echo "medios - Módulo de medios"
    echo
    echo "Tareas sobre medios en general."
    echo "Se usan funciones de otros módulos."
    echo
}

#Listar todos los medios
#En el formato siguiente:
#De las películas:
#id titulo pelicula
#De las series igual que la función siguiente a esta (medios.listSeries)
function medios.listAll() {
	local datos=$(db.executeQuery "select * from medio")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		if [[ ${PELICULA[esserie]} == 1 ]]; then
			e="$e serie"
			local ds=$(db.executeQuery "select * from episodio where idmedio = ${PELICULA[id]} and esvisto = 0 order by temporada, episodio limit 1")
			if [[ $ds != "" ]]; then
			 	series.parseEpisodio "$ds"
			 	e="$e ${EPISODIO[temporada]}x${EPISODIO[episodio]}"
			 	e2=""
			 	if [[ ${EPISODIO[fichero]} == "" ]]; then
			 		e2="no"
			 	else
			 		e2="si"
			 	fi
			 	if [[ ${EPISODIO[torrent]} == "" ]]; then
			 		e2="$e2 no"
			 	else
			 		e2="$e2 si"
			 	fi
			 	e="$e $e2"			 	
			else
			 	e="$e -1"
			fi
		else
			e="$e pelicula"
		fi
		echo "$e"
	done
}

function medios.listAll.info() {
    echo "medios.listAll - Listar todos los medios. Películas y series."
    echo
    echo -e "\tArgumentos: -"
    echo
    echo "Si el medio es una serie se muestra el episodio por el que llega el usuario."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f medios.listAll"
}

#Listar todas las series
#El formato de salida es el siguiente:
#id titulo episodio descargado descargando
#
#El episodio será dado en el formato temporadaxepisodio, sin espacios
#Descargado y descargando serán "si" o "no" en minúsculas.
#
#Si la serie no tiene episodios, en lugar del episodio mostrará "-1" y no
#dará más detalles.
function medios.listSeries() {
	local datos=$(db.executeQuery "select * from medio where esserie = 1")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		
		local ds=$(db.executeQuery "select * from episodio where idmedio = ${PELICULA[id]} and esvisto = 0 order by temporada, episodio limit 1")
		if [[ $ds != "" ]]; then
		 	series.parseEpisodio "$ds"
		 	e="$e ${EPISODIO[temporada]}x${EPISODIO[episodio]}"
		 	e2=""
		 	if [[ ${EPISODIO[fichero]} == "" ]]; then
		 		e2="no"
		 	else
		 		e2="si"
		 	fi
		 	if [[ ${EPISODIO[torrent]} == "" ]]; then
		 		e2="$e2 no"
		 	else
		 		e2="$e2 si"
		 	fi
		 	e="$e $e2"
		else
			e="$e -1"
		fi
		echo "$e"
	done
}

function medios.listSeries.info() {
    echo "medios.listSeries - Lista solo las series."
    echo
    echo -e "\tArgumentos: -"
    echo
    echo "De cada serie se muestra el episodio por el que se llega el usuario."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f medios.listSeries"
}

#Listar todas las películas
#En el formato id titulo
function medios.listPeliculas() {
	local datos=$(db.executeQuery "select * from medio")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		echo "$e"
	done
}

function medios.listPeliculas.info() {
    echo "medios.listPeliculas - Lista las películas que están en la base de datos."
    echo
    echo -e "\tArgumentos: -"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f medios.listPeliculas"
}

function medios.findSeries() {
	local busqueda="$@"
	local datos=$(db.executeQuery "select * from medio where esserie = 1 and titulo like \"%$busqueda%\"")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]}"
		
		local ds=$(db.executeQuery "select * from episodio where idmedio = ${PELICULA[id]} and esvisto = 0 order by temporada, episodio limit 1")
		if [[ $ds != "" ]]; then
		 	series.parseEpisodio "$ds"
		 	e="$e ${EPISODIO[temporada]}x${EPISODIO[episodio]} ${EPISODIO[id]}"
		 	e2=""
		 	if [[ ${EPISODIO[fichero]} == "" ]]; then
		 		e2="no"
		 	else
		 		e2="si"
		 	fi
		 	if [[ ${EPISODIO[torrent]} == "" ]] || [[ ${EPISODIO[torrent]} == "-1" ]]; then
		 		e2="$e2 no"
		 	else
		 		e2="$e2 si"
		 	fi
		 	e="$e $e2"
		else
			e="$e -1"
		fi
		echo "$e"
	done
}

function medios.findSeries.info() {
    echo "medios.findSeries - Encontrar series."
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Busca series cuyo título coincida con la cadena de búsqueda indicada."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f medios.findSeries:poirot"
    echo -e "\tsintel -f medios.findSeries:\"agatha christie\""
}

function medios.findPeliculas() {
	local busqueda="$@"
	local datos=$(db.executeQuery "select * from medio where esserie = 0 and titulo like \"%$busqueda%\"")
	local e=""
	local e2=""
	local res=""

	readarray -t datosa <<< "$datos"
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		e=""
		e="${PELICULA[id]} ${PELICULA[titulo]} ${PELICULA[fichero]}"
		echo "$e"
	done
}

function medios.findPeliculas.info() {
    echo "medios.findPeliculas - Encontrar películas."
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Muestra películas cuyos títulos coincidan con la cadena de búsqueda."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.findPeliculas:northwest"
    echo -e "\tsubtek -f medios.findPeliculas\"star trek\""
}

function medios.listEpisodios() {
	local idmedio="$1"
	local e=""

	local datos=$(db.executeQuery "select * from episodio where idmedio = $idmedio order by temporada, episodio")
	readarray -t datosa <<< "$datos"
	for episodio in "${datosa[@]}"; do
		series.parseEpisodio "$episodio"

		e="${EPISODIO[id]} ${EPISODIO[temporada]} ${EPISODIO[episodio]} ${EPISODIO[fichero]} ${EPISODIO[torrent]} ${EPISODIO[esvisto]} ${EPISODIO[esdescargado]}"
		echo "$e"
	done
}

function medios.listEpisodios.info() {
    echo "medios.listEpisodios - Listar episodios de una serie"
    echo
    echo -e "\tArgumentos: id de la serie"
    echo
    echo "Mustra una lista de todos los episodios de la serie cuyo id"
    echo "se ha especificado como argumento."
    echo
    echo "De cada episodio se dan los siguientes datos:"
    echo "id, idmedio, temporada, episodio, fichero, torrent, esvisto, esdescargado"
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.listEpisodios:871"
}

function medios.extractTe() {
	local medio="$1"
	local te=""
	local rem=""
	local aux=""

	local EXPS=( '[0-9]{1,3}[xX][0-9]{1,4}' '[sS][0-9]{1,3}[eE][0-9]{1,4}' '[0-9]{1,3}[oO][fF][0-9]{1,4}' )

	let i=0
	for exp in "${EXPS[@]}"; do
		te=$(grep -oE $exp <<< "$medio")
		if [[ "$te" != "" ]]; then
			case "$i" in
				0 )
					break
					;;
				1 )
					aux=${te:1}
					rem=$(grep -oE '[eE]' <<< "$aux")
					$DEBUG && echo "rem: $rem" > /dev/tty
					aux=${aux/$rem/x}
					$DEBUG && echo "aux: $aux" > /dev/tty
					te="$aux"
					break
					;;
				2 )
					rem=$(grep -oE '[oO][fF]' <<< $te)
					$DEBUG && echo "rem: $rem" > /dev/tty
					aux=${te/$rem/x}
					$DEBUG && echo "aux: $aux" > /dev/tty
					te="$aux"
					break
					;;
				* )
					echo "ERROR: Esto no debería suceder 2" > /dev/tty
					break
			esac
		fi
		(( i++ ))
	done

	echo "$te"
}

function medios.extractTe.info() {
    echo "medios.extractTe - Extrae la temporada y el episodio del nombre del fichero."
    echo
    echo -e "\tArgumentos: ruta de fichero"
    echo
    echo "Intenta extraer la temporada y el número de episodio del nombre del"
    echo "fichero que contiene el episodio."
    echo
    echo "Puesto que los medios se descargan desde diferentes fuentes, los formatos"
    echo "en que están representados estos valores varían."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -n medios.extractTe:\"Elementary s07e01.mp4\""
    echo -e "\tsintel -n medios.extractTe:\"Dark 01x04.mjv\""
}

function medios.fixTitulo() {
	local medio="$*"

	medio="$(tr -d '[\[\]]' <<< $medio)"
	medio="$(tr -d '[\(\)]' <<< $medio)"

	local EXPS=( '[0-9]{1,3}[xX][0-9]{1,4}' '[sS][0-9]{1,3}[eE][0-9]{1,4}' '[0-9]{1,3}[oO][fF][0-9]{1,4}' '[hH][dD][tT][vV]' '[xX][vV][iI][dD]' '[dD][iI][vV][xX]' '[dD][vV][dD]' '[bB][dD][rR][iI][pP]' '[hH][dD][rR][iI][pP]' '[tT][sS]' '[sS][cC][rR][eE][eE][nN][eE][rR]' 'www.*.["com""net""es"]' )
	local f=""

	for exp in "${EXPS[@]}"; do
		$DEBUG && echo "Exp: >$exp<" > /dev/tty
		f=$(grep -oE "$exp" <<< "$medio")
		while [[ "$f" != "" ]]; do
			readarray -t af <<< "$f"
			for c in "${af[@]}"; do
				$DEBUG && echo "F: >$c<" > /dev/tty	
				medio="${medio/$c/}"
				$DEBUG && echo "Medio: $medio" > /dev/tty
			done
			f=$(grep -oE "$exp" <<< "$medio")
		done
	done

	echo "$medio"
}

function medios.fixTitulo.info() {
    echo "medios.fixTitulo - Elimina partes innecesarias de un título."
    echo
    echo -e "\tArgumentos: título"
    echo
    echo "Reduce el título a nombre de serie temporada y episodo, eliminando"
    echo "todo lo superfluo."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.fixTitulo:\"Elementary 07of01 [Elitetorrent] [DVDRIP].mp4\""
}

function medios.getTituloSerie() {
	local medio="$1"

	# Extraemos el nombre del archivo sin su ruta
	local aux="${medio##*/}"
	# Eliminamos la extensión
	aux="${aux%.*}"	

	# Eliminamos todo a partir de temporadaxepisodio
	local te=$(medios.extractTe "$aux")
	local aux2=${aux%%$te*}
	if [[ "$aux2" == "" ]]; then
		aux2="$aux"
	fi

	# Eliminamos elementos no deseados del título
	aux=$(medios.fixTitulo "$aux2")



	# Trocamos posibles guiones bajos y puntos, en espacios
	aux=$(tr '_' ' ' <<< "$aux")
	aux=$(tr '.' ' ' <<< "$aux")

	# local te=$(medios.extractTe "$medio")
	# if [[ "$te" == "" ]]; then
	# 	echo "Esto no debería pasar. ERROR: No es una serie"
	# 	exit
	# fi
	# aux="${aux/$te/}"

	# aux="${aux%%[sS][0-9]*}"
	# elif [[ "$te2" != "" ]]; then
	# elif [[ "$te3" != "" ]]; then
	# elif [[ "$te4" != "" ]]; then
	# elif [[ "$te5" != "" ]]; then
	# elif [[ "$te6" != "" ]]; then
	# 	aux="${aux%% [0-9]*}"
	# fi
	#aux="${aux%%(*}"
	#aux="${aux%%[*}"
	# aux="${aux%%HDTV*}"

	# Eliminamos guiones
	aux=$(tr -d '-' <<< $aux)

	# Se devuelve el resultado
	echo $(trim "$aux")
}

function medios.getTituloSerie.info() {
    echo "medios.getTituloSerie - Obtiene el nombre de la serie."
    echo
    echo -e "\tArgumentos: ruta de archivo"
    echo
    echo "Reduce la ruta completa y nombre de un archivo de medio al"
    echo "título de la serie al que pertenece."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.getTituloSerie:\"/home/mhyst/Extra/Dead zone 1x08 [xVID].avi\""
}

function medios.getTituloPelicula() {
	local medio="$1"

	local aux="${medio##*/}"
	aux="${aux%.*}"

	# Eliminamos elementos no deseados del título
	aux=$(medios.fixTitulo "$aux")
	#aux="${aux%%[0-9]*}"
	#aux="${aux%%(*}"
	#aux="${aux%%[*}"
	# aux="${aux%%HDTV*}"
	aux=$(tr '.' ' ' <<< $aux)
	aux=$(tr -d '-' <<< $aux)
	#aux=$(tr -d "'" <<< $aux)
	echo $(trim "$aux")
}

function medios.getTituloPelicula.info() {
    echo "medios.getTituloPelicula - Obtiene el título de la película del nombre del fichero."
    echo
    echo -e "\tArgumentos: fichero"
    echo
    echo "Limpia el nombre del fichero de la ruta y todo lo superfluo, para"
    echo "obtener el título de la película."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.getTituloPelicula:\"Wonder [HDRip][VOSE][wWw.EliteTorrent.BiZ].mp4\""
}

function medios.detectar() {
	local folder="$1"
	local re='[0-9]{1,2}x[0-9]{1,3}'
	local te=""
	local temporada=""
	local episodio=""
	local titulo=""
	local fichero=""
	local torrent=""
	local aux=""
	local id=""
	local epid=""

	if [ ! -d "$folder" ]; then
	 	echo "El directorio >$folder< no existe"
	 	exit
	fi
	cd "$folder"
	find * -name '*.avi' -o -name '*.mp4' -o -name '*.mkv' -type f | sort > /tmp/films.txt

	readarray -t datosa < /tmp/films.txt
	for medio in "${datosa[@]}"; do

		#aux=`sed "s/&apos;/\'/g" <<< $medio`
		fichero="$folder$medio"

		te=$(medios.extractTe "$medio")

		# te=$(grep -oE '[0-9]{1,2}x[0-9]{1,3}' <<< $medio)
		# if [[ "$te" == "" ]]; then
		# 	#Intentemos detectar este otro formato: S01E01 
		# 	te=$(grep -oE 'S[0-9]{1,2}E[0-9]{1,3}' <<< ${medio^^})
		# 	if [[ "$te" != "" ]]; then
		# 		te="${te:1}"
		# 		te=$(tr 'E' 'x' <<< $te)
		# 	fi
		# fi
		if [[ "$te" != "" ]]; then
			titulo=$(medios.getTituloSerie "$medio")
			echo "Serie: $titulo"
			#Es una serie tenemos que crear la serie si no existe y crear el episodio correspondiente
			#Extraemos el episodio y la temporada que es
			IFS='x' read -a aux <<< "$te"; IFS=" "
			temporada="${aux[0]}"
			episodio="${aux[1]}"
			if [[ "$temporada" == "" ]] || [[ "$episodio" == "" ]]; then
				echo "ERROR: No se pudo obtener te2 en >$medio<"; continue;
			else
				echo "Temporada: $temporada, Episodio: $episodio"
			fi
			id=$(series.getIdByTitulo "$titulo")
			if [[ "$id" == "" ]]; then
				#No existe, la creamos
				series.add "$titulo" "null" "-1"
				id="$ROWID"
			fi

			$DEBUG && echo "Comprobando si el episodio existe"
			epid=$(series.getEpisodioId "$id" "$temporada" "$episodio")
			$DEBUG && echo "Comprobado $epid"
			if [[ "$epid" == "" ]]; then
				$DEBUG && echo "Intentando insertar episodio..."
				#Puesto que ya existe, añadimos el episodio
				series.addEpisodio "$id" "$temporada" "$episodio" "$fichero" "-1"
				$DEBUG && echo "Intentado!"
			else
				echo "Ep episodio ya está en la base de datos."
			fi
		else
			#Si es una película, simplemente añadimos la película
			titulo=$(medios.getTituloPelicula "$medio")
			echo "Pelicula: $titulo"
			id=$(film.getByTitulo "$titulo")
			if [[ "$id" == "" ]]; then
				#No existe, la creamos
				film.add "$titulo" "$fichero" "-1"
				id="$ROWID"
			else
				echo "La película ya existe en la base de datos"
			fi	
		fi
	done
}

function medios.detectar.info() {
    echo "medios.detectar - Añade medios a la base de datos."
    echo
    echo -e "\tArgumentos: ruta de carpeta"
    echo
    echo "Escanea una carpeta y todos sus subdirectorios en busca de medios."
    echo "Es capaz de diferenciar las series de las películas."
    echo "Todo lo que encuentra lo añade a la base de datos."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.detectar:/home/mhyst/Descargas/"
}

#Determinar el id de la serie que estamos buscando.
#En algunos casos es posible que haya varias series con nombres similares.
#Esta función permitirá al usuario seleccionar entre ellas la que quiere.
function medios.determineSeries() {
	local busqueda="$@"

	local res=$(series.find "$busqueda")

	if [[ "$res" == "" ]]; then
		#echo "No se ha encontrado ninguna serie" > /dev/tty
		echo "-1"
		exit
	fi
	readarray -t devueltos <<< $res

	if [[ ${#devueltos[@]} == 0 ]]; then
		echo "-1"
		exit
	fi

	if [[ ${#devueltos[@]} == 1 ]]; then
		series.parse "${devueltos[0]}"
		echo "${SERIE[id]}"
	else
		echo -e "\e[47m\e[31m Series coincidentes \e[0m\n" > /dev/tty
		#echo "--------------------" > /dev/tty
		let i=0
		for reg in "${devueltos[@]}"; do
			series.parse "$reg"
			echo " $i:	${SERIE[titulo]}" > /dev/tty
			(( i++ ))
		done
		local LIMITE=$(( ${#devueltos[*]} - 1 ))
		local CHOSENID=$(userChoice $LIMITE "Seleccione la serie:")
		series.parse "${devueltos[$CHOSENID]}"
		echo "${SERIE[id]}"
	fi
}

function medios.determineSeries.info() {
    echo "medios.determineSeries - Determinar el id de la serie por una cadena de búsqueda."
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Esta función hace uso de medios.find para tratar de determinar cual es el id"
    echo "de la serie a partir de una cadena de búsqueda."
    echo "En caso de haber varias posibilidades se le ofrece al usuario la elección."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f medios.determineSeries:dark"
}

#Determinar si un episodio de una serie está ya descargado
function medios.isDownloaded () {

	local id="$1"
	local te="$2"

	$DEBUG && echo "ID: $id, TE: $te" > /dev/tty

	IFS='x' read -a aux <<< "$te"; IFS=" "
	temporada="${aux[0]}"
	episodio="${aux[1]}"
	if [[ "$temporada" == "" ]] || [[ "$episodio" == "" ]]; then
		echo "ERROR: No se pudo obtener te2 en >$medio<" > /dev/tty
		echo "false"
		exit
	fi

	if [[ "$id" == "" ]] || [[ "$id" == "-1" ]]; then
		echo "ERROR: No se pudo determinar el id de la serie: $serie" > /dev/tty
		echo "false"
		exit
	fi

	local epid=$(series.getEpisodioId "$id" "$temporada" "$episodio")

	if [[ "$epid" == "" ]]; then
		echo "false"
		exit
	else
		local reg=$(series.getEpisodioById "$epid")
		if [[ "$reg" == "" ]]; then
			echo "ERROR: No se pudo obtener el episodio por el ID obtenido"
			echo "false"
			exit
		fi
		series.parse "$reg"
		if [[ "${SERIE[fichero]}" == "" ]]; then
			echo "false"
		else
			echo "true"
		fi
	fi
}

function medios.isDownloaded.info() {
    echo "medios.isDowloaded - Averigua si de una serie tenemos descargado un episodio concreto."
    echo
    echo -e "\tArgumentos: id, te"
    echo
    echo "id es el id de la serie, mientras que te es la temporada y el episodio expresados"
    echo "como temporadaxepisodio de forma númérica. Ej.: 01x03."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -n medios.isDownloaded:\"871|10x07\""
}

#Determinar si un episodio de una serie está ya descargado
function medios.isDownloaded2 () {

	local serie="$1"
	local te="$2"

	IFS='x' read -a aux <<< "$te"; IFS=" "
	temporada="${aux[0]}"
	episodio="${aux[1]}"
	if [[ "$temporada" == "" ]] || [[ "$episodio" == "" ]]; then
		echo "ERROR: No se pudo obtener te2 en >$medio<" > /dev/tty
		echo "-1"
		exit
	fi

	local id=$(medios.determineSeries "$serie")

	if [[ "$id" != "" ]] && [[ "$id" != "-1" ]]; then
		echo "ERROR: No se pudo determinar el id de la serie: $serie" > /dev/tty
		echo "-1"
		exit
	fi

	local epid=$(series.getEpisodioId "$id" "$temporada" "$episodio")

	if [[ "$epid" == "" ]]; then
		echo "false"
		exit
	else
		local reg=$(series.getEpisodioById "$epid")
		if [[ "$reg" == "" ]]; then
			echo "ERROR: No se pudo obtener el episodio por el ID obtenido"
			echo "-1"
			exit
		fi
		series.parse "$reg"
		if [[ "${SERIE[fichero]}" == "" ]]; then
			echo "false"
		else
			echo "true"
		fi
	fi
}

function medios.isDownloaded2.info() {
    echo "medios.isDownloaded2 - Determina si cierto episodio de una serie está descargado."
    echo
    echo -e "\tArgumentos: titulo, te"
    echo
    echo "Esta función es idéntica a 'medios.isDownloaded' salvo que esta permite"
    echo "indicar el título de la serie en lugar de su id. Usa una llamada a "
    echo "medios.determineSeries para obtener el id de la serie."
    echo
    echo "te es la temporada y el episodio separados por una x."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -n medios.isDownloaded2:\"poirot|10x03\""
}

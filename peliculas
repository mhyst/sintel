#!/bin/bash
# This file is part of Sintel.
#
# Sintel is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sintel is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Sintel.  If not, see <https://www.gnu.org/licenses/>.
#
#
#Gestión de películas de sintel

declare -A PELICULA


PELICULA=( ["id"]="" ["titulo"]="" ["fichero"]="" ["torrent"]="" ["esserie"]="" ["esvisto"]="" ["esdescargado"]="" )

function peliculas.info() {
    echo "peliculas - Gestión de películas"
    echo
    echo "Contiene todo lo necesario para añadir, modificar y ver"
    echo "medios de películas."
    echo
    echo "Puesto que peliculas es un nombre largo, se ha optado por"
    echo "la palabra inglesa film para el prefijo de este módulo."
    echo
    echo "Registro:"
    echo
    echo "id | titulo | fichero | torrent | esserie | esvisto | esdescargado"
}

#@ film.add titulo fichero torrent
function film.add() {
    checkArgs 3 $@
    [[ $? != 0 ]] && exit 1   
	local titulo="$1"
	local fichero="$2"
	local torrent="$3"

	$DEBUG && echo "> film.add" > /dev/tty
	db.executeUpdate "insert into medio (titulo, fichero, torrent, esserie, esvisto) values (\"$titulo\",\"$fichero\",$torrent,0,0)"
	$DEBUG && echo "< film.add" > /dev/tty
	echo "$ROWID"
}

function film.add.info() {
    echo "film.add - Añadir película (titulo fichero torrent)"
    echo
    echo -e "\tArgumentos: titulo, fichero, torrent"
    echo
    echo "Añade una película nueva a la base de datos."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -n film.add:\"Indiana Jones y la última cruzada|/home/mhyst/Peliculas/IndianaJones3.avi|182\""
}

#@ film.add2 registro (Formato: titulo|fichero|torrent)
function film.add2() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local datos="$1"
	film.parse "$datos"
	local titulo="${PELICULA[titulo]}"
	local fichero="${PELICULA[fichero]}"
	local torrent="${PELICULA[torrent]}"

	db.executeUpdate "insert into medio (titulo, fichero, torrent, esserie, esvisto) values (\"$titulo\",\"$fichero\",$torrent,0,0,0)"
	echo "$ROWID"
}

function film.add2.info() {
    echo "film.add2 - Añadir película (un solo argumento)"
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Esta función es prácticamente idéntica a film.add. la direfencia"
    echo "estriba en que la primera requiere tres argumentos separados"
    echo "mientras que esta solo requiere uno que luego divide en los tres"
    echo "datos que le hacen falta: título, fichero y torrent."
    echo
    echo "Mirando los ejemplos se puede ver que las llamadas son casi idénticas"
    echo "a excepción de que film.add utiliza la opción -n y esta -f. Véase la"
    echo "documentación de las funciones callFuncion y callFuncion2 para saber"
    echo "más."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.add2:\"North By Northwest|/home/mhyst/Peliculas/Nbnw.mp4|305\""
}

#@ film-getById id
function film.getById() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"

	$DEBUG && echo "> film.getById" > /dev/tty
	local res=$(db.executeQuery "select * from medio where id = $id")
	$DEBUG && echo "< film.getById" > /dev/tty
	echo "$res"
}

function film.getById.info() {
    echo "film.getById - Obtener película por id"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Esta función devuelve el registro de la película tal como fue"
    echo "almacenado en la base de datos. Cada campo separado por '|'."
    echo
    echo "id se corresponde con el id de la tabla medio donde se almacenan"
    echo "tanto películas como series, por lo que si se proporciona el id"
    echo "de una serie, se dará el registro de esta."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.getById:871"
}

#@ film.getIdByTitulo titulo
function film.getIdByTitulo() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local titulo="$1"

	$DEBUG && echo "> film.getByTitulo" > /dev/tty
	local res=$(db.executeQuery "select id from medio where esserie=0 and titulo = \"$titulo\"")
	$DEBUG && echo "< film.getByTitulo" > /dev/tty
	echo "$res"
}

function film.getIdByTitulo.info() {
    echo "film.getIdByTitulo - Obtener id de película por título"
    echo
    echo -e "\tArgumentos: título"
    echo
    echo "Devolverá todos los id de las películas cuyo  título sea"
    echo "exactamente igual a la cadena proporcionada como argumento."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.getIdByTitulo:\"El puente sobre el río Kwai\""
}

#@ film.getByTitulo titulo
function film.getByTitulo() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local titulo="$1"

	$DEBUG && echo "> film.getByTitulo" > /dev/tty
	local res=$(db.executeQuery "select * from medio where esserie=0 and titulo = \"$titulo\"")
	$DEBUG && echo "< film.getByTitulo" > /dev/tty
	echo "$res"
}

function film.getByTitulo.info() {
    echo "film.getByTitulo - Obtener registro por título."
    echo
    echo -e "\tArgumentos: ritulo"
    echo
    echo "Devuelve todos los registros de la tabla medio cuyo título"
    echo "sea igual al suministrado."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f getByTitulo:Vértigo"
}

#@  film-getByFichero fichero
function film.getByFichero() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local fichero="$1"

	local res=$(db.executeQuery "select * from medio where esserie = 0 and fichero = \"$fichero\"")
	echo "$res"
}

function film.getByFichero.info() {
    echo "film.getByFichero - Película por nombre de fichero."
    echo
    echo -e "\tArgumentos: ruta de fichero"
    echo
    echo "Devuelve el registro completo de cada película cuyo fichero"
    echo "con ruta completa coincida con el suministrado."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.getByFicheri:\"/home/mhyst/Peliculas/Nbnw.mjv\""
}

#@ film-find busqueda
function film.find() {
	local busqueda="$@"

	echo "Busqueda: $busqueda" > /dev/tty
	local res=$(db.executeQuery "select * from medio where esserie = 0 and titulo like \"%${busqueda}%\"")
	echo "$res"	
}

function film.find.info() {
    echo "film.find - Buscar películas"
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Devuelve el registro de todas las películas cuyo título"
    echo "contenga la cadena suministrada."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.find:kwai"
}

#@ film-getId titulo (sinonimo de getIdByTitulo)
function film.getId() {
	local titulo="$1"

	local id=$(db.executeQuery "select id from medio where esserie = 0 and titulo = \"$titulo\"")
}

function film.getId.info() {
    echo "film.getId - Igual que getIdByTitulo"
    echo
    echo -e "\tArgumentos: titulo"
    echo
    echo "Devolverá todos los id de las películas cuyo  título sea"
    echo "exactamente igual a la cadena proporcionada como argumento."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.getId:\"El puente sobre el río Kwai\""
}

#@ film.remove id
function film.remove() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"

	db.executeUpdate "delete from medio where esserie = 0 and id = $id"
}

function film.remove.info() {
    echo "film.remove - Eliminar película por id"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Elimina la película con el id suministrado."
    echo "El id es único, por lo que no se borrará más de una."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.remove:871"
}

#@ film-updateFichero id fichero
function film.updateFichero() {
    checkArgs 2 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"
	local fichero="$2"

	db.executeUpdate "update medio set fichero=\"$fichero\" where id = $id"
}

function film.updateFichero.info() {
    echo "film.updateFichero - Actualizar fichero"
    echo
    echo -e "\tArgumentos: id, ruta fichero"
    echo
    echo "Actualiza el fichero del medio cuyo id se ha suministrado."
    echo "No distingue entre series y películas."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -n film.updateFichero:\"2|/mnt/Peliculas/Nbnw.mp4\""
}

#@ film.updateTorrent id torrent
function film.updateTorrent() {
    checkArgs 2 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"
	local torrent="$2"

	db.executeUpdate "update medio set torrent=$torrent where id = $id"
}

function film.updateTorrent.info() {
    echo "film.updateTorrent - Actualizar torrent por id"
    echo
    echo -e "\tArgumentos: id, torrent"
    echo
    echo "Actualiza el torrent de la película cuyo id se ha suministrado."
    echo "Cabe notar que en este caso el torrent no es más que el id"
    echo "del torrent asignado por transmission. Con este dato, y la"
    echo "ayuda del módulo torrents, se puede obtener información del"
    echo "torrent en transmission. Esto permite saber, entre otras cosas"
    echo "si el torrent ya ha terminado de descargarse."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -n film.updateTorrent:\"2|296\""
}

#@ film.setVista id
function film.setVista() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"

	db.executeUpdate "update medio set esvisto=1 where id = $id"
}

function film.setVista.info() {
    echo "film.setVista - Establece una película como vista."
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.setVista:2"
}

#@ film.setNoVista id
function film.setNoVista() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"

	db.executeUpdate "update medio set esdescargado=0 where id = $id"
}

function film.setNoVista.info() {
    echo "film.setNoVista - Establece una película como no vista."
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.setNoVista:2"
}

#@ film.setDescargada id
function film.setDescargada() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"

	db.executeUpdate "update medio set esdescargado=1 where id = $id"
}

function film.setDescargada.info() {
    echo "film.setDescargada - Establece una película como descargada."
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.setDescargada:1"
}

#@ film.SetNoDescargada id
function film.setNoDescargada() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local id="$1"

	db.executeUpdate "update medio set esvisto=0 where id = $id"
}

function film.setNoDescargada.info() {
    echo "film.setNoDescargada - Establece una película como no descargada."
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.setNoDescargada:1"
}

#@ film.parse datos (Formato: (id|titulo|fichero|torrent|esserie|esvisto|esdescargado))
function film.parse() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local datos="$1"

	IFS='|' read -a datosa <<< "$datos"; IFS=" "
	PELICULA[id]="${datosa[0]}"
	PELICULA[titulo]="${datosa[1]}"
	PELICULA[fichero]="${datosa[2]}"
	PELICULA[torrent]="${datosa[3]}"
	PELICULA[esserie]="${datosa[4]}"
	PELICULA[esvisto]="${datosa[5]}"
	PELICULA[esdescargado]="{datosa[6]}"
}

function film.parse.info() {
    echo "film.parse - Procesa registro de película."
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Recibe un registro con el formato:"
    echo "campo1|campo2|campo3|etc"
    echo "y separa cada campo en una celda del array"
    echo "PELICULA."
}

#@ film.parseToFile datos
function film.parseToFile() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local datos="$1"

	film.parse "$datos"

	echo > /tmp/PELICULA
	let i=0
	for key in ${!PELICULA[@]}; do
		echo "$key ${PELICULA[$key]}" >> /tmp/PELICULA
	done
}

function film.parseToFile.info() {
    echo "film.parseToFile - Procesa registro y lo copia al archivo /tmp/PELICULA"
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Esta función permite compartir datos de una película con"
    echo "otros scripts o programas."
}

#@ film.getField field
function film.getField() {
    checkArgs 1 $@
    [[ $? != 0 ]] && exit 1   
	local field="$1"

	let i=0
	for key in "${!PELICULA[@]}"; do
		if [[ "$key" == "$field" ]]; then
			$DEBUG && echo "Coincide con $key. Salimos" > /dev/tty
			break
		fi
		(( i++ ))
	done
	$DEBUG && echo "El valor de i es $i" > /dev/tty
	if [[ $i < ${#PELICULA[@]} ]]; then
		local res=$(grep "^$field" /tmp/PELICULA | awk '{ print $2 };')
		echo "$res"
	else
		echo "-1"
	fi
}

function film.getField.info() {
    echo "film.getField - Obtiene un campo de un registro"
    echo
    echo -e "\tArgumentos: nombre del campo"
    echo
    echo "Antes de poder llamar a esta función debe de haberse"
    echo "incovado la función film.parse."
    echo
    echo "Ejemplos:"
    echo -e "\tsintel -f film.getField:titulo"
}

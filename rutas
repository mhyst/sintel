#!/bin/bash
# This file is part of Sintel.
#
# Sintel is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sintel is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Sintel.  If not, see <https://www.gnu.org/licenses/>.
#
#
#Gestión de reemplazo de rutas servidor/cliente

#Si tenemos transmission en un ordenador distinto, se hace necesario utilizar dos rutas distintas
#a los archivos de medios. Una desde el punto de vista del servidor y otra desde el del cliente.
#Este módulo permite gestionar los necesarios reemplazos.

function rutas.info() {
    echo "rutas - Gestión de rutas de reemplazo"
    echo
    echo "En caso de trabajar con un servidor de transmission remoto"
    echo "como es lógico tendremos la carpeta donde se descargan los"
    echo "archivos montada en local. Necesitamos un sistema que sea"
    echo "capaz de trabajar con las rutas del lado del servidor y al"  
    echo "mismo tiempo poder traducirlas a rutas que funcionen desde"
    echo "el punto de vista del equipo local. Por ejemplo en mi caso"    
    echo "dispongo de un NAS local donde las rutas serían algo como"
    echo "esto:"
    echo
    echo -e "\t/share/HDB_DATA/Download/pelicula.avi"
    echo
    echo "En cambio, suponiendo que la carpeta Download estuviese"
    echo "montada en /mnt/Download las rutas locales serían algo así:"
    echo
    echo -e "\t/mnt/Download/pelicula.avi"
    echo
    echo "Ambas rutas apuntan en realidad al mismo archivo, pero cada"
    echo "una de ellas solo funcionará en un equipo. Si queremos añadir"
    echo "un torrent nuevo, tendremos que darle una ruta del lado del"
    echo "servidor, pero cuando se trata de reproducir una película"
    echo "será imprescindible utilizar la ruta del lado del equipo de"
    echo "escritorio. El módulo rutas realiza el mantenimiento de la"
    echo "tabla de rutas y el reemplazo de un tipo de ruta por otro"
    echo "cuando es necesario."
}

function rutas.add() {
    [[ $# != 2 ]] && ( die $(iargs 2 "ruta y reemplazo") )
    
	local ruta="$1"
	local reemplazo="$2"

	db.executeUpdate "insert into ruta values (\"$ruta\",\"$reemplazo\")"
}

function rutas.add.info() {
    echo "rutas.add - Añadir ruta."
    echo
    echo -e "\tArgumentos: ruta, reemplazo"
    echo
    echo "Añade una nueva correspondencia de rutas."
    echo "Se añade una ruta remota con su correspondencia local."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f rutas.add:\"/share/HDB_DATA/Download/ /home/mhyst/NAS/Download/\""
}

function rutas.remove() {
    [[ $# != 1 ]] && ( die $(iargs 1 "ruta") )
	local ruta="$1"

	db.executeUpdate "delete from ruta where ruta=\"$ruta\""
}

function rutas.remove.info() {
    echo "rutas.remove - Eliminar una ruta"
    echo
    echo -e "\tArgumentos: ruta"
    echo
    echo "Elimina una correspondencia cuya ruta remota corresponda"
    echo "con la ruta dada."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f rutas.remove:/share/HDB_DATA/Download/"
}

function rutas.get() {
    [[ $# != 1 ]] && ( die $(iargs 1 "ruta") )
	local ruta="$1"

	local res=$(db.executeQuery "select reemplazo from ruta where ruta=\"$ruta\"")
}

function rutas.get.info() {
    echo "rutas.get - Obtener reemplazo de ruta"
    echo
    echo -e "\tArgumentos: ruta"
    echo
    echo "Dada una ruta remota obtiene la correspondencia local."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f rutas.get:/share/HDB_DATA/Download/"
}

function rutas.extraer() {
    [[ $# != 1 ]] && ( die $(iargs 1 "ruta") )
	local path="$1"

	local res=$(db.executeQuery "select ruta from ruta")

	readarray -t datosa <<< "$res"
	for ruta in "${datosa[@]}"; do
		if [[ "$path" == "$ruta*" ]]; then
			echo "$ruta"
			exit 0
		fi
	done
}

function rutas.extraer.info() {
    echo "rutas.extraer - Obtener ruta coincidente"
    echo
    echo -e "\tArgumentos: ruta parcial"
    echo
    echo "Devuelve la primera ruta que coincida con la ruta"
    echo "parcial indicada."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f rutas.extraer:/share/HDB_DATA/"
}

function rutas.getReemplazo() {
    [[ $# != 1 ]] && ( die $(iargs 1 "ruta") )
	local ruta="$1"

	local reemplazo=$(db.executeQuery "select reemplazo from ruta where ruta = \"$ruta\"")
	echo "$reemplazo"
}

function rutas.getReemplazo.info() {
    echo "rutas.getReemplazo - Obtener reemplazo de ruta"
    echo
    echo -e "\tArgumentos: ruta"
    echo
    echo "Esta función es sinónima de rutas.get"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f rutas.getReemplazo:/share/HDB_DATA/Download/" 
}

function rutas.replace() {
    [[ $# != 1 ]] && ( die $(iargs 1 "ruta") )
	local path="$1"
	local reemplazo=""
	local ruta=""

	local res=$(db.executeQuery "select ruta from ruta")

	readarray -t datosa <<< "$res"
	for r in "${datosa[@]}"; do
		if [[ ${path} == ${r}* ]]; then
			reemplazo=$(rutas.getReemplazo "$r")
			ruta="$r"
			break
		fi
	done

	if [[ "$reemplazo" == "" ]]; then
		echo "-1"
		exit
	else
		local filename="${path##*$ruta}"
		echo "$reemplazo$filename"
	fi
}

function rutas.replace.info() {
    echo "rutas.replace - Obtiene la ruta local de una ruta dada."
    echo
    echo -e "\tArgumentos: ruta"
    echo
    echo "Busca la ruta remota a la que pertenece la ruta indicada"
    echo "y devuelve la ruta local. Es decir, si se le pasa esta "
    echo "ruta:"
    echo
    echo -e "\t/share/HDB_DATA/Download/transmission/LaSoga.mp4"
    echo
    echo "Devolverá:"
    echo
    echo -e "\ŧ/home/mhyst/NAS/Download/transmission/LaSoga.mp4"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f rutas.replace:/share/HDB_DATA/Download/transmission/LaSoga.mp4"
}

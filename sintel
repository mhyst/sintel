#!/bin/bash
# This file is part of Sintel.
#
# Sintel is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sintel is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Sintel.  If not, see <https://www.gnu.org/licenses/>.
#
#
# Inteligencia sobre series y películas. Lleva una base de datos a la que los demás scripts podrán consultar e insertar tados.

#Directorio global del script
global_DIR=~/bin/scripts/sintel
DEBUG=false
VERSION="2.6.2"

#Cargamos los módulos
MODS=( "error" "help" "generic" "doc" "init" "database" "peliculas" "series" "medios" "torrents" "rutas" "head" "ver" "test" "anime" "veronline" )

source "$global_DIR/modularity"



#################################################################################################
# P R O G R A M A      P R I N C I P A L
#################################################################################################

#Configuramos como queremos los argumentos de entrada
TEMP=`getopt -o hd:f:s:li:n:x:m --long "help,add-serie:,add-pelicula:,add-alter:,find-peliculas:,find-series:,list-all,list-series,list-peliculas,ver-pelicula:,list-episodios:,detectar:,function-call:,function-call2:,list-functions,determine-series:,is-downloaded:,info:,mods" -- "$@"`


#Si no se han introducido argumentos, mostrar la ayuda y salir
if [ $# == 0 ]; then help; exit 1; fi

#Evaluar la cadena de argumentos obtenida con getopt
eval set -- "$TEMP"


# Debug
#echo "$TEMP"

busqueda=""
directorio=""
funcion=""

#Procesamos los argumentos
while true; do
  case "$1" in
  	-h | --help ) help; exit ;;
	--list-all ) medios.listAll ;;
	--list-series ) medios.listSeries ;;
	--list-peliculas ) medios.listPeliculas ;;
	--find-series ) busqueda="$2"; shift; medios.findSeries $busqueda ;; 
	--find-peliculas ) busqueda="$2"; shift; medios.findPeliculas $busqueda ;;
	--add-pelicula ) registro="$2"; shift; film.add2 "$registro" ;;
	--list-episodios ) idmedio="$2"; shift; medios.listEpisodios "$idmedio" ;;
	-d | --detectar ) directorio="$2"; shift; medios.detectar "$directorio" ;;
	-f | --function-call ) funcion="$2"; shift; doc.callFunction "$funcion" ;;
	-n | --function-call2 ) funcion="$2"; shift; doc.callFunction2 "$funcion" ;;
	-l | --list-functions ) doc.listFunctions ;;
	-x ) busqueda="$2"; shift; doc.listFunctions "$busqueda" ;;
	-s | --determine-series ) busqueda="$2"; shift; medios.determineSeries "$busqueda" ;;
	-i | --is-downloaded ) funcion="$2"; shift; doc.callFunction "medios.isDownloaded:$funcion" ;;
	--info ) funcion="$2"; shift; doc.functionInfo "$funcion" ;;
	-m | --mods ) doc.listModules ;;
    * ) break ;;
  esac
  shift
done

if [[ $1 = "--" ]]; then
	shift
fi


function testPeliculas() {
	#Añadimos película
	local titulo=""
	read -p "Introduce el título de la película: " titulo
	film.add "$titulo" "" 0
	echo "ID: $ROWID"

	#Obtenemos la película
	local datos=$(film.getById "$ROWID")
	echo "$datos"

	#La procesamos y la mostramos
	film.parse "$datos"
	echo "Pelicula:"
	echo "Id: ${PELICULA[id]}"
	echo "Título: ${PELICULA[titulo]}"
	echo "Fichero: ${PELICULA[fichero]}"
	echo "torrent: ${PELICULA[torrent]}"
	echo "¿Es una serie?: $([ ${PELICULA[esserie]} == 0 ] && echo "No" || echo "Sí")"
	echo "¿La he visto?: $([ ${PELICULA[esvisto]} == 0 ] && echo "No" || echo "Sí")"

	datos=$(film.getByTitulo "$titulo")

	#La procesamos y la mostramos
	film.parse "$datos"
	echo "Pelicula:"
	echo "Id: ${PELICULA[id]}"
	echo "Título: ${PELICULA[titulo]}"
	echo "Fichero: ${PELICULA[fichero]}"
	echo "torrent: ${PELICULA[torrent]}"
	echo "¿Es una serie?: $([ ${PELICULA[esserie]} == 0 ] && echo "No" || echo "Sí")"
	echo "¿La he visto?: $([ ${PELICULA[esvisto]} == 0 ] && echo "No" || echo "Sí")"


	read -p "Introduce el patron a buscar: " titulo
	datos=$(film.find "$titulo")
	echo "Resultado de la búsqueda"
	echo "$datos"

	local id=""
	read -p "Qué id quieres borrar? " id
	film.remove $id
	echo "Borrado"
}

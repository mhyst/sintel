# This file is part of Sintel.
#
# Sintel is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sintel is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Sintel.  If not, see <https://www.gnu.org/licenses/>.
#
#
#Ver una serie o película

PLAYER="vlc -f --no-loop --play-and-exit"

function ver.info() {
    echo "ver - Reproducir medios"
    echo
    echo "Varias funciones cuyo cometido es reproducir"
    echo "series y películas."
}

function ver.pelicula() {
	local busqueda="$@"

	local datos=$(db.executeQuery "select * from medio where esserie = 0 and esvisto = 0 and titulo like \"%$busqueda%\"")

	if [[ "$datos" == "" ]]; then
		echo "No hay películas que se correspondan con la cadena de búsqueda: $busqueda" > /dev/tty
		exit
	fi

	readarray -t datosa <<< "$datos"

	echo "Películas encontradas: ${#datosa[@]}" > /dev/tty
	if [[ ${#datosa[@]} == 0 ]]; then
		echo "No hay películas que se correspondan con la cadena de búsqueda: $busqueda" > /dev/tty
		exit
	fi

	let i=0
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		
		echo "$i:	${PELICULA[titulo]}" > /dev/tty
		(( i++ ))
	done

	readarray -t datosa <<< "$datos"
	local LIMITE=$(( ${#datosa[@]} - 1 ))
	local CHOSENID=$(userChoice $LIMITE "Seleccione la película:")
	
	film.parse "${datosa[$CHOSENID]}"
	local filename="${PELICULA[fichero]}"
	echo "Id de la película: ${PELICULA[id]}" > /dev/tty

	$PLAYER "$filename"
	film.setVista "${PELICULA[id]}"
}

function ver.pelicula.info() {
    echo "ver.pelicula - Reproducir película"
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Muestra una lista de películas cuyos títulos"
    echo "contengan la cadena de búsqueda dada."
    echo "Después se le da al usuario la opción de elegir"
    echo "una de las películas de la lista. Luego la"
    echo "película escogida es reproducida."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f ver.pelicula:\"dial m for murder\""
}

function ver.serieOld() {
	local busqueda="$@"

	local datos=$(db.executeQuery "select * from medio where esserie = 1 and esvisto = 0 and titulo like \"%$busqueda%\"")

	if [[ "$datos" == "" ]]; then
		echo "No hay series que se correspondan con la cadena de búsqueda: $busqueda" > /dev/tty
		exit
	fi

	readarray -t datosa <<< "$datos"

	echo "Series encontradas: ${#datosa[@]}" > /dev/tty
	echo "----------------------------------" > /dev/tty
	if [[ ${#datosa[@]} == 0 ]]; then
		echo "No hay series que se correspondan con la cadena de búsqueda: $busqueda" > /dev/tty
		exit
	fi

	let i=0
	for medio in "${datosa[@]}"; do
		film.parse "$medio"
		
		echo "$i:	${PELICULA[titulo]}" > /dev/tty
		(( i++ ))
	done

	readarray -t datosa <<< "$datos"
	local LIMITE=$(( ${#datosa[@]} - 1 ))
	local CHOSENID=$(userChoice $LIMITE "Seleccione la película:")
	
	film.parse "${datosa[$CHOSENID]}"
	local idmedio="${PELICULA[id]}"

	local t=$(db.executeQuery "select min(temporada) from episodio where idmedio=$idmedio and esvisto=0")
	local idepisodio=$(db.executeQuery "select min(id) from episodio where idmedio = $idmedio and temporada = $t and esvisto = 0")
	local filename=$(db.executeQuery "select fichero from episodio where id = $idepisodio")

	$PLAYER "$filename"
	db.executeUpdate "update episodio set esvisto=1 where id=$idepisodio"
}

function ver.serieOld.info() {
    echo "ver.serieOld - Reproducir episodio de una serie"
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Muestra una lista de las series cuyo título"
    echo "contenga la cadena de búsqueda indicada."
    echo "Se le da al usuario la posibilidad de escoger"
    echo "una de ellas. Una vez elegida, se reproduce"
    echo "el primer episodio no visto de la serie."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f ver.serieOld:poirot"
}

function ver.cache() {
    [[ $# != 3 ]] && ( die $(iargs 3 "id, título y n. episodios") )
    
	local idserie="$1"
	local titulo="$2"
	local nepisodios="$3"

	clear > /dev/tty

	echo -e "\e[92mSerie:\e[0m  \e[1m$titulo\e[0m - $nepisodios episodios" > /dev/tty
	echo > /dev/tty
	echo > /dev/tty
	local next=$(head.next "$idserie")
	local backup="$next"

	#echo "ver.cache next: >$next<" > /dev/tty

	if [[ "$next" == "-1" ]]; then
		echo "No hay episodios" > /dev/tty
		exit
	fi 

	local datos=$(db.executeQuery "select * from episodio where idmedio=$idserie order by temporada, episodio")

	if [[ "$datos" == "" ]]; then
		echo "Error: se supone que hay episodios pero no son accesibles" > /dev/tty
		exit
	fi

	readarray -t datosa <<< "$datos"

	let i=0
	let ini=-1
	let fin=-1
	for episodio in "${datosa[@]}"; do
		series.parseEpisodio "$episodio"
		#series.screenEpisodio
		if [[ "${EPISODIO[id]}" == "$next" ]]; then
			#echo "El id de episodio coincide!" > /dev/tty
			(( ini = i - 5 ))
			if (( ini < 0 )); then
				(( ini = 0 ))
			fi
			(( fin = i+5 ))
			if (( fin-ini < 10 )); then
				let count=fin-ini
				let inc=10-count
				(( fin = fin + inc ))
			fi
			#if (( fin >= ${#datosa[@]} )); then
			#	(( fin = ${#datosa[@]}-1 ))
			#fi
			break
		fi
		(( i++ ))
	done

	#echo "ini: $ini, fin: $fin" > /dev/tty
	if [[ ini == -1 ]] || [[ fin == -1 ]]; then
		echo "ERROR: No se pudo establecer un rango de episodios" > /dev/tty
		exit
	fi

	#echo "Ahora los 10 episodios cercanos al que toca!" > /dev/tty
	#echo "Los datos contienen: $datos"

	echo
	echo
	readarray -t datosa <<< "$datos"
	let i=0
	for episodio in "${datosa[@]}"; do
		#echo "datosa de $i $episodio"
		if (( i >= ini )) && (( i <= fin )); then
			#echo "Entra ini-fin" > /dev/tty
			series.parseEpisodio "$episodio"
			#series.screenEpisodio
			if [[ "${EPISODIO[id]}" == "$next" ]]; then
				echo -e -n "> \e[38;5;196m\e[47m" > /dev/tty
			else
				echo -n "  " > /dev/tty
			fi
			echo -e "${EPISODIO[temporada]}x${EPISODIO[episodio]}:		${EPISODIO[fichero]}\e[0m" > /dev/tty
		fi
		(( i++ ))
	done

	echo "$backup"
}

function ver.cache.info() {
    echo "ver.cache - Mostrar 10 episodios alrededor del que toca ver"
    echo
    echo -e "\tArgumentos: idserie, titulo, nº de episodios"
    echo
    echo "Función interna utilizaba por 'ver.serie' para mostrar"
    echo "el episodio que toca ver, cinco por arriba y cinco por"
    echo "debajo, para facilitar la navegación por los episodios"
    echo "de la serie sin tener que mostrar todos los episodios,"
    echo "que en algunos casos serían demasiados."
}

function ver.play() {
    [[ $# != 1 ]] && ( die $(iargs 1 "idepisodio") )
	local idepisodio=$(grep -E '[0-9]{1,3}' <<< "$1")
	#echo "$idepisodio" | hexdump -C >> /dev/tty

	#echo "Episodio a reproducir: $idepisodio, size: ${#idepisodio}" > /dev/tty

	local filename=$(db.executeQuery "select fichero from episodio where id = $idepisodio")

	#echo "Filename: $filename" > /dev/tty

	$PLAYER "$filename" 2> /dev/null > /dev/null
	db.executeUpdate "update episodio set esvisto=1 where id=$idepisodio"
}

function ver.play.info() {
    echo "ver.play - Reproducir un episodio"
    echo
    echo -e "\tArgumentos: idepisodio"
    echo
    echo "Dado el número de episodio, reproduce el episodio"
    echo "usando el reproductor contenido en la variable \$PLAYER"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f ver.play:1153"
}

function ver.serie() {
	local busqueda="$@"

	local idserie=$(medios.determineSeries "$busqueda")

	if [[ "$idserie" == "-1" ]]; then
		echo "No hay series que se correspondan con la cadena de búsqueda: $busqueda" > /dev/tty
		exit
	fi

	local titulo=$(db.executeQuery "select titulo from medio where id=$idserie")
	local nepisodios=$(db.executeQuery "select count(id) from episodio where idmedio=$idserie")

	local correcto=false
	while ! $correcto; do
		local next=$(ver.cache "$idserie" "$titulo" "$nepisodios")
		#echo "ver.serie2 Next: >$next<"
		echo > /dev/tty
		echo > /dev/tty
		#echo "p - reproducir | r - reset | f - adelante | b - atras " > /dev/tty

		echo -e " \e[47m\e[30m p - reproducir \e[0m \e[47m\e[30m r - reset \e[0m \e[47m\e[30m f - adelante \e[0m \e[47m\e[30m b - atras\e[0m \e[47m\e[30m ff - adelante N \e[0m \e[47m\e[30m bb - atrás N \e[0m\n" > /dev/tty
		echo -e " \e[47m\e[30m rt - reset temporada \e[0m \e[47m\e[30m ft - marcar temporada \e[0m \e[47m\e[30m q - salir \e[0m" > /dev/tty

		read -p "> " action
		eval set -- "$action"
		case $1 in
			p ) : $(ver.play "$next") ;;
			r ) head.reset "$idserie" ;;
			f ) head.forth "$idserie" ;;
			b ) head.back "$idserie" ;;
			ff ) 
				if [[ "$2" == "" ]]; then
					echo "Para la acción ff debe indicar el número de episodios que quiere avanzar" > /dev/tty
				else
					echo "Espere un momento..." > /dev/tty
					head.markN "$idserie" "$2"
				fi
				;;
			bb ) 
				if [[ "$2" == "" ]]; then
					echo "Para la acción bb debe indicar el número de episodios que quiere avanzar" > /dev/tty
				else
					echo "Espere un momento..." > /dev/tty
					head.resetN "$idserie" "$2"
				fi
				;;
			rt ) 
				if [[ "$2" == "" ]]; then
					echo "Para la acción rt debe indicar la temporada que quiere resetear" > /dev/tty
				else
					echo "Espere un momento..." > /dev/tty
					head.resetTemporada "$idserie" "$2"
				fi
				;;
			ft ) 
				if [[ "$2" == "" ]]; then
					echo "Para la acción bb debe indicar la temporada que quiere marcar" > /dev/tty
				else
					echo "Espere un momento..." > /dev/tty
					head.markTemporada "$idserie" "$2"
				fi
				;;
			q ) echo "Hasta otra!" > /dev/tty; correcto=true ;;
			* ) echo "Acción incorrecta. Pulse enter para continuar..." > /dev/tty; read ;;
		esac

		if [[ "$action" == "p" ]]; then
			correcto=true
		fi

		#echo "Pulse una enter para continuar..." > /dev/tty
		#read
		
	done
}

function ver.serie.info() {
    echo "ver.serie - Ver una serie"
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Esta es una de las funciones más complejas de sintel."
    echo "Permite ver un episodio de una serie de forma interactiva."
    echo "Primero trata de determinar de qué serie se trata"
    echo "mostrando varias en caso de que haya más de una que"
    echo "coincidan con la cadena de búsqueda. Una vez que el usuario"
    echo "ha elegido cuál es la que desea ver, entra en el menú"
    echo "interactivo de episodios que tiene varias opciones que"
    echo "permiten mover el puntero de la serie, así como reproducir"
    echo "un episodio. Una vez entrado en el modo de reproducción,"
    echo "esta función finaliza."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f ver.serie:marple"
}

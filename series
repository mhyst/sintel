#!/bin/bash
# This file is part of Sintel.
#
# Sintel is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Sintel is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Sintel.  If not, see <https://www.gnu.org/licenses/>.
#
#
#Gestión de series
#
#Básicamente queremos utilizar la base de datos de momento como elemento adicional de dxtotal y mt o mtf y quizá 
#en el futuro, se use con exclusividad, sustituyendo al método de la carpeta de series.
#
#Se deben poder añadir series a seguir y episodios conforme se vayan descargando.
#Así mismo servirá para llevar la cuenta de los vistos en "ver".

declare -A SERIE
SERIE=( ["id"]=""  ["titulo"]="" ["fichero"]="" ["torrent"]="" ["esserie"]="" ["esvisto"]="" )
declare -A EPISODIO
EPISODIO=( ["id"]="" ["idmedio"]="" ["temporada"]="" ["episodio"]="" ["fichero"]="" ["torrent"]="" ["esvisto"]="" ["esdescargado"]="" )

function series.info() {
    echo "series - Gestión de series"
    echo
    echo "Este módulo es muy parecido a películas, aunque añade"
    echo "algunas funciones adicionales como aquellas que se"
    echo "cuidan de gestionar los episodios."
    echo
    echo "Registros: serie, episodio"
    echo
    echo "serie = id | titulo | fichero | torrent | esserie | esvisto"
    echo "episodio = id | idmedio | temporada | episodio | fichero |"
    echo "           torrent | esvisto | esdescargado"
}

function series.add() {
    [[ $# != 1 ]] && ( die $(iargs 1 "título") )
	local titulo="$1"

	$DEBUG && echo "> series.add" > /dev/tty
	db.executeUpdate "insert into medio (titulo, fichero, torrent, esserie, esvisto,esdescargado) values (\"$titulo\",\"\",-1,1,0,0)"	
	$DEBUG && echo "< series.add" > /dev/tty
	echo "$ROWID"
}

function series.add.info() {
    echo "series.add - Agrega una serie a la base de datos"
    echo
    echo -e "\tArgumentos: titulo"
    echo
    echo "Crea una serie nueva en la base de datos."
    echo "Solo graba el título, ya que el resto de los datos"
    echo "pertenecen a cada episodio."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.add:Poirot"
}

function series.getById() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	$DEBUG && echo "> series.getById" > /dev/tty
	local res=$(db.executeQuery "select * from medio where id = $id and esserie=1")
	$DEBUG && echo "< series.getById" > /dev/tty
	echo "$res"
}

function series.getById.info() {
    echo "series.getById - Obtener serie por id"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Obtiene el registro de la serie que corresponda al"
    echo "id proporcionado. El id es un identificador único,"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getById:1"
}

function series.getIdByTitulo() {
    [[ $# != 1 ]] && ( die $(iargs 1 "título") )
	local titulo="$1"

	$DEBUG && echo "> series.getByTitulo" > /dev/tty
	local res=$(db.executeQuery "select id from medio where esserie=1 and titulo like \"%${titulo,,}%\" limit 1")
	$DEBUG && echo "< series.getByTitulo" > /dev/tty
	echo "$res"
}

function series.getIdByTitulo.info() {
    echo "series.getIdByTitulo - Obtener id por el título"
    echo
    echo -e "\tArgumentos: titulo"
    echo
    echo "Obtiene el id de la serie que coincide con el título"
    echo "indicado."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getIdByTitulo:Poirot"
}

function series.getByTitulo() {
    [[ $# != 1 ]] && ( die $(iargs 1 "título") )
	local titulo="$1"

	$DEBUG && echo "> series.getByTitulo" > /dev/tty
	local res=$(db.executeQuery "select * from medio where esserie=1 and titulo = \"$titulo\"")
	$DEBUG && echo "< series.getByTitulo" > /dev/tty
	echo "$res"
}

function series.getByTitulo.info() {
    echo "series.getByTitulo - Obtener serie por título"
    echo
    echo -e "\tArgumentos: titulo"
    echo
    echo "Obtiene el registro de la serie que coincida con el"
    echo "título indicado."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getByTitulo:Poirot"
}

function series.find() {
	local busqueda="$@"

	local res=$(db.executeQuery "select * from medio where esserie = 1 and titulo like \"%${busqueda}%\"")
	echo "$res"	
}

function series.find.info() {
    echo "series.find - Buscar serie"
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Devuelve todos los registros cuyo título contenga la cadena"
    echo "de búsqueda especificada como argumento."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.find:christie"
}

function series.getId() {
    [[ $# != 1 ]] && ( die $(iargs 1 "título") )
	local titulo="$1"

	local id=$(db.executeQuery "select id from medio where esserie = 1 and titulo = \"$titulo\"")
}

function series.getId.info() {
    echo "series.getId - Obtener id de la serie"
    echo
    echo -e "\tArgumentos: titulo"
    echo
    echo "Devuelve el id de la serie cuyo título corresponde con el"
    echo "pasado como argumento."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getId:Poirot"
}

function series.remove() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "delete from medio where esserie = 1 and id = $id"
}

function series.remove.info() {
    echo "series.remove - Eliminar serie"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Borra de la base de datos la serie que corresponde al id"
    echo "pasado como argumento en la llamada a la función."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.remove:282"
}

function series.updateFichero() {
    [[ $# != 2 ]] && ( die $(iargs 2 "id y fichero") )
    
	local id="$1"
	local fichero="$2"

	db.executeUpdate "update medio set fichero=\"$fichero\" where id = $id"
}

function series.updateFichero.info() {
    echo "series.updateFichero - Actualizar fichero de la serie"
    echo
    echo -e "\tArgumentos: id, fichero"
    echo
    echo "Las series se graban en la tabla medio, igual que las películas"
    echo "pero ni el torrent ni el fichero se tienen en cuenta para las"
    echo "series, dado que hay un fichero y un torrent por cada episodio."
    echo "Por lo tanto no tiene mucho sentido grabar nada en fichero, pero"
    echo "se ha respetado pensando en futuras características."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.updateFichero:\"/share/HDB_DATA/Download/serie.avi\""
}

function series.updateTorrent() {
    [[ $# != 2 ]] && ( die $(iargs 2 "id y torrent") )
    
	local id="$1"
	local torrent="$2"

	db.executeUpdate "update medio set torrent=$torrent where id = $id"
}

function series.updateTorrent.info() {
    echo "series.updateTorrent - Actualizar torrent de la serie"
    echo
    echo -e "\tArgumentos: id, torrent"
    echo
    echo "Permite actualizar el torrent de la serie, pero dado que cada"
    echo "episodio tiene el suyo, no tiene mucho sentido. De todas formas"
    echo "se ha mantenido esta función."
    echo
    echo "El torrent es el id generado por el cliente transmission."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.updateTorrent:312"
}

function series.setVista() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "update medio set esvisto=1 where id = $id"
}

function series.setVista.info() {
    echo "series.setVista - Marcar una serie como vista."
    echo
    echo -e "\tArgumento: id"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.setVista:1143"
}

function series.parse() {
    [[ $# != 1 ]] && ( die $(iargs 1 "registro") )
	local datos="$1"

	#$DEBUG && echo ">Entra en series.parse" > /dev/tty
	IFS='|' read -a datosa <<< "$datos"; IFS=" "
	SERIE[id]="${datosa[0]}"
	SERIE[titulo]="${datosa[1]}"
	SERIE[fichero]="${datosa[2]}"
	SERIE[torrent]="${datosa[3]}"
	SERIE[esserie]="${datosa[4]}"
	SERIE[esvisto]="${datosa[5]}"
	# SERIE[esdescargado]="${datosa[6]}"
	#$DEBUG && echo "<Sale en series.parse" > /dev/tty
}

function series.parse.info() {
    echo "series.parse - Procesar registro de serie"
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Procesa un registro de serie y lo introduce en el array"
    echo "SERIE para un acceso más cómodo."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.parse:\"24 'Se ha escrito un crimen' '' -1 0 0\""
}

function series.parseToFile() {
    [[ $# != 1 ]] && ( die $(iargs 1 "registro") )
	local datos="$1"

	series.parse "$datos"

	echo > /tmp/SERIE
	let i=0
	for key in ${!SERIE[@]}; do
		echo "$key ${SERIE[$key]}" >> /tmp/SERIE
	done
}

function series.parseToFile.info() {
    echo "series.parseToFile - Procesar registro de serie a archivo"
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Realiza la misma función que series.parse y además graba"
    echo "los datos a un archivo para compartirlos con un programa"
    echo "externo."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.parseToFile:\"12 'Poirot' '' -1 0 0\""
}

function series.getField() {
    [[ $# != 1 ]] && ( die $(iargs 1 "campo") )
	local field="$1"

	let i=0
	for key in "${!SERIE[@]}"; do
		if [[ "$key" == "$field" ]]; then
			$DEBUG && echo "Coincide con $key. Salimos" > /dev/tty
			break
		fi
		(( i++ ))
	done
	$DEBUG && echo "El valor de i es $i" > /dev/tty
	if [[ $i < ${#SERIE[@]} ]]; then
		local res=$(grep "^$field" /tmp/SERIE | awk '{ print $2 };')
		echo "$res"
	else
		echo "-1"
	fi
}

function series.getField.info() {
    echo "series.getField - Obtener campo de registro de serie"
    echo
    echo -e "\tArgumentos: campo"
    echo
    echo "Una vez se ha procesado un registro de serie se puede emplear"
    echo "esta función para obtener el valor de cualquiera de los campos"
    echo "definidos en el registro."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getField:titulo"
}

function series.addEpisodio() {
    [[ $# != 5 ]] && ( die $(iargs 5 "id, temporada, episodio, fichero y torrent") )
    
	local idmedio="$1"
	local temporada="$2"
	local episodio="$3"
	local fichero="$4"
	local torrent="$5"

	db.executeUpdate "insert into episodio (idmedio, temporada, episodio, fichero, torrent, esvisto, esdescargado)\
	 values ($idmedio,$temporada,$episodio,\"$fichero\",$torrent,0,0)"
}

function series.addEpisodio.info() {
    echo "series.addEpisodio - Añadir episodio"
    echo
    echo -e "\tArgumentos: idmedio, temporada, episodio, fichero, torrent"
    echo
    echo "Da de alta un episodio en la base de datos. Este esta relacionado"
    echo "con una serie a través del campo idmedio."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.addEpisodio:\"12 1 1 '/share/HDB_DATA/Download/poirot01x01.avi' 234\""
}

function series.getEpisodioById() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	local res=$(db.executeQuery "select * from episodio where id = $id")
	echo "$res"
}

function series.getEpisodioById.info() {
    echo "series.getEpisodioById - Obtener episodio por id"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Obtiene el registro del episodio cuyo id sea el indicado."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getEpisodioById:12"
}

function series.getEpisodioByFichero() {
    [[ $# != 1 ]] && ( die $(iargs 1 "fichero") )
	local fichero="$1"

	local res=$(db.executeQuery "select * from episodio where fichero = \"$fichero\"")
	echo "$res"
}

function series.getEpisodioByFichero.info() {
    echo "series.getEpisodioByFichero - Obtener episodio por fichero"
    echo
    echo -e "\tArgumentos: fichero"
    echo
    echo "Obtiene el registro del episodio cuyo fichero sea igual"
    echo "que el indicado."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getEpisodioByFichero:\"/share/HDB_DATA/Download/Poirot01x01.avi\""
}

function series.findEpisodio() {
	local busqueda="$@"

	local res=$(db.executeQuery "select * from episodio where fichero like \"%${busqueda}%\"")
	echo "$res"	
}

function series.findEpisodio.info() {
    echo "series.findEpisodio - Buscar episodio por fichero"
    echo
    echo -e "\tArgumentos: cadena de búsqueda"
    echo
    echo "Devuelve el registro de episodio cuyo fichero contenga"
    echo "la cadena de búsqueda indicada."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.findEpispdio:\"Poirot01x01\""
}

function series.getEpisodioId() {
    [[ $# != 3 ]] && ( die $(iargs 3 "id, temporada y episodio") )
    
	local idmedio="$1"
	local temporada="$2"
	local episodio="$3"

	local id=$(db.executeQuery "select id from episodio where idmedio = $idmedio and temporada = $temporada and episodio = $episodio limit 1")
	echo "$id"
}

function series.getEpisodioId.info() {
    echo "series.getEpisodioId - Obtener id de episodio"
    echo
    echo -e "\tArgumentos: idmedio, temporada, episodio"
    echo
    echo "Devuelve el id de un episodio de la serie especificada por"
    echo "idmedio, y que cuya temporada y número de episodio sean iguales"
    echo "a los indicados como argumento."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getEpisodioId:\"871 10 7\""
}

function series.removeEpisodio() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "delete from episodio where id = $id"
}

function series.removeEpisodio.info() {
    echo "series.removeEpisodio - Eliminar episodio por id"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Borra de la base de datos el episodio cuyo id sea el indicado."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.removeEpisodio:1153"
}

function series.updateEpisodioFichero() {
    [[ $# != 2 ]] && ( die $(iargs 2 "id y fichero") )
    
	local id="$1"
	local fichero="$2"

	db.executeUpdate "update episodio set fichero=\"$fichero\" where id = $id"
}

function series.updateEpisodioFichero.info() {
    echo "series.updateEpisodioFichero - Actualizar fichero del episodio"
    echo
    echo -e "\tArgumentos: id, fichero"
    echo
    echo "Actualiza el fichero del episodio cuyo id es el indicado."
    echo "Al igual que las series y las películas, cada episodio tiene"
    echo "un identificador único que está en el campo id."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.updateEpisodioFichero:\"1152 '/mnt/datos/Poirot10x07.avi'\""
}

function series.updateEpisodioTorrent() {
    [[ $# != 2 ]] && ( die $(iargs 2 "id y torrent") )
    
	local id="$1"
	local torrent="$2"

	db.executeUpdate "update episodio set torrent=$torrent where id = $id"
}

function series.updateEpisodioTorrent.info() {
    echo "series.updateEpisodioTorrent - Actualizar el torrent del episodio"
    echo
    echo -e "\tArgumentos: id, torrent"
    echo
    echo "Actualiza el torrent del episodio cuyo id es el indicado."
    echo "Recordemos que el torrent no es un archivo, sino el id que"
    echo "asigna el cliente de BitTorrent transmission a cada torrent."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.updateEpisodioTorrent:\"1152 312\""
    echo -e "\tsintel -n series.updateEpisodioTorrent:\"1152|312\""
}

function series.setEpisodioVista() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "update episodio set esvisto=1 where id = $id"
}

function series.setEpisodioVista.info() {
    echo "series.setEpisodioVista - Marca un episodio como visto"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.setEpisodioVista:1152"
}

function series.setEpisodioNoVista() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "update episodio set esvisto=0 where id = $id"
}

function series.setEpisodioNoVista.info() {
    echo "series.setEpisodioNoVista - Marca un episodio como no visto"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.setEpisodioNoVista:1152"
}

function series.setEpisodioDescargado() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "update episodio set esdescargado=1 where id = $id"
}

function series.setEpisodioDescargado.info() {
    echo "series.setEpisodioDescargado - Marca un episodio como descargado"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.setEpisodioDescargado:1152"
}

function series.setEpisodioNoDescargado() {
    [[ $# != 1 ]] && ( die $(iargs 1 "id") )
	local id="$1"

	db.executeUpdate "update episodio set esdescargado=0 where id = $id"
}

function series.setEpisodioNoDescargado.info() {
    echo "series.setEpisodioNoDescargado - Marca un episodio como no descargado"
    echo
    echo -e "\tArgumentos: id"
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.setEpisodioNoDescargado:1152"
}

function series.parseEpisodio() {
    [[ $# != 1 ]] && ( die $(iargs 1 "registro") )
	local datos="$1"

	IFS='|' read -a datosa <<< "$datos"; IFS=" "

	EPISODIO[id]="${datosa[0]}"
	EPISODIO[idmedio]=${datosa[1]}
	EPISODIO[temporada]="${datosa[2]}"
	EPISODIO[episodio]="${datosa[3]}"
	EPISODIO[fichero]="${datosa[4]}"
	EPISODIO[torrent]="${datosa[5]}"
	EPISODIO[esvisto]="${datosa[6]}"
	EPISODIO[esdescargado]="${datosa[7]}"
}

function series.parseEpisodio.info() {
    echo "series.parseEpisodio - Procesa registro de episodio"
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Separa cada campo del registro en las diferentes celdas del"
    echo "array EPISODIO para un más fácil acceso."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.parseEpisodio:\"1152 12 'Poirot' 10 7 '/mnt/Datos/Poirot10x07.avi' 312 0 0\""
}

function series.parseEpisodioToFile() {
    [[ $# != 1 ]] && ( die $(iargs 1 "registro") )
	local datos="$1"

	series.parseEpisodio "$datos"

	echo > /tmp/EPISODIO
	let i=0
	for key in ${!EPISODIO[@]}; do
		echo "$key ${EPISODIO[$key]}" >> /tmp/EPISODIO
	done
}

function series.parseEpisodioToFile.info() {
    echo "series.parseEpisodioToFile - Procesa registro de episodio a archivo"
    echo
    echo -e "\tArgumentos: registro"
    echo
    echo "Procesa el episodio y escribe el resultado en el archivo"
    echo "/tmp/EPISODIO para compartir los datos con un programa externo."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.parseEpisodioToFile:\"1152 12 'Poirot' 10 7 '/mnt/Datos/Poirot10x07.avi' 312 0 0\""
}

function series.getEpisodioField() {
    [[ $# != 1 ]] && ( die $(iargs 1 "campo") )
	local field="$1"

	let i=0
	for key in "${!EPISODIO[@]}"; do
		if [[ "$key" == "$field" ]]; then
			$DEBUG && echo "Coincide con $key. Salimos" > /dev/tty
			break
		fi
		(( i++ ))
	done
	$DEBUG && echo "El valor de i es $i" > /dev/tty
	if [[ $i < ${#EPISODIO[@]} ]]; then
		local res=$(grep "^$field " /tmp/EPISODIO | awk '{ print $2 };')
		echo "$res"
	else
		echo "-1"
	fi
}

function series.getEpisodioField.info() {
    echo "series.getEpisodioField - Obtiene el valor de un campo del registro de episodio"
    echo
    echo -e "\tArgumentos: campo"
    echo
    echo "Una vez procesado un registro de episodio con series.parseEpisodio"
    echo "se puede llamar a esta función para obtener el valor de uno de sus"
    echo "campos."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.getEpisodioField:fichero"
}

function series.parseTemporada() {
    [[ $# != 1 ]] && ( die $(iargs 1 "te") )
	local te="$1"

	IFS='x' read -a aux <<< "$te"; IFS=" "
	echo "${aux[0]}"
}

function series.parseTemporada.info() {
    echo "series.parseTemporada - Obtener temporada de un episodio"
    echo
    echo -e "\tArgumentos: te"
    echo
    echo "Devuelve la temporada a partir de una cadena que contenga"
    echo "la temporada y el episodio separados por el caracter 'x'."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.parseTemporada:10x07"
}

function series.parseEpisodioNum() {
    [[ $# != 1 ]] && ( die $(iargs 1 "te") )
	local te="$1"

	IFS='x' read -a aux <<< "$te"; IFS=" "
	echo "${aux[1]}"
}

function series.parseEpisodioNum.info() {
    echo "series.parseEpisodioNum - Obtener el número del episodio"
    echo
    echo -e "\tArgumentos: te"
    echo
    echo "Devuelve el número del episodio a partir de una cadena que"
    echo "contenga la temporada y el episodio separados por el"
    echo "caracter 'x'."
    echo
    echo "Ejemplo:"
    echo -e "\tsintel -f series.parseEpisodioNum:10x07"
}

function series.screenEpisodio() {
	echo "${EPISODIO[id]} ${EPISODIO[idmedio]} ${EPISODIO[temporada]} ${EPISODIO[episodio]}" > /dev/tty
	# ${EPISODIO[fichero]}
	# ${EPISODIO[torrent]}
	# ${EPISODIO[esvisto]}
	# ${EPISODIO[esdescargado]}
}

function series.screenEpisodio.info() {
    echo "series.screenEpisodio - Obtener id idmedio temporada y episodio"
    echo
    echo -e "\tArgumentos: -"
    echo
    echo "Una vez procesado un episodio con la función series.parseEpisodio"
    echo "se puede llamar a esta función para obtener o imprimir por pantalla"
    echo "los siguientes datos del episodio:"
    echo -e "\ŧid idmedio temporada episodio"
    echo
    echo "Puesto que para que esta función opere correctamente es necesario"
    echo "que el array EPISODIO tenga datos, es imposible invocar a esta"
    echo "función desde fuera de sintel. Solo es de uso interno por otros"
    echo "módulos de sintel."
}
